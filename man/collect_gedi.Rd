% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chewie-arrow.r
\name{collect_gedi}
\alias{collect_gedi}
\title{Collect GEDI data into an sf object}
\usage{
collect_gedi(
  x,
  gedi_find,
  intersects = attributes(gedi_find)$intersects,
  drop_xy_vars = TRUE
)
}
\arguments{
\item{x}{An arrow dataset object.}

\item{gedi_find}{The chewie.find object used to obtain \code{x}.}

\item{intersects}{logical; whether to filter the GEDI data based on the
search extent attributed to the \code{chewie.find} object. Default is to use
whatever was specified in chewie.find.}

\item{drop_xy_vars}{logical; whether to drop the columns used to create the
geometry column. Default is \code{TRUE}.}
}
\value{
an sf object
}
\description{
Collect GEDI data, returned from \code{grab_gedi}, as an sf object.
}
\details{
This function is used to collect the GEDI data returned from \code{grab_gedi} as
an sf object. It is largely a wrapper for dplyr::collect but converts to sf
and filters the gedi footprints based on the search extent attributed to the
\code{chewie.find} object.
It is strongly recomended that you make the most of the ability to to edit
the gedi data on read by using the \code{dplyr} verbs before collecting the data.
This will save a lot of time and memory. However, make sure that, when
selecting columns, you do not remove the \code{lat_lowestmode} and
\code{lon_lowestmode} columns as these are required to create the geometry column.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
prairie_creek <- sf::read_sf(
  system.file("geojson", "prairie-creek.geojson", package = "chewie")
)
prairie_creek_find_4a <- find_gedi(prairie_creek,
  gedi_product = "4A",
  date_start = "2022-01-01", date_end = "2022-04-01",
  cache = FALSE
)

prairie_creek_grab_4a <- grab_gedi(prairie_creek_find_4a)

prairie_creek_4a_sf <- collect_gedi(
  prairie_creek_grab_4a,
  prairie_creek_find_4a
)
print(prairie_creek_4a_sf)
\dontshow{\}) # examplesIf}
}
