% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chewie-grab.r
\name{grab_gedi}
\alias{grab_gedi}
\title{Download GEDI data or access from cahce}
\usage{
grab_gedi(
  x,
  add_vars = NULL,
  progress = TRUE,
  timeout = 7200,
  delete_h5 = TRUE
)
}
\arguments{
\item{x}{A chewie.find.x object.}

\item{add_vars}{A named list of GEDI variables to add to the returned
dataset. See details.}

\item{progress}{A logical indicating whether to show a progress bar.}

\item{timeout}{A numeric indicating the timeout in seconds.}

\item{delete_h5}{A logical indicating whether to delete the hdf5 file after
conversion to parquet. Default is TRUE. these files are saved in
\code{getOption("chewie.h5.cache")}.}
}
\value{
An arrow_dplyr_query object.
}
\description{
Download GEDI data from the NASA Earthdata in hdf5 format.
}
\details{
This function is the main handler for gedi data - it checks the cache to see
if the required GEDI data are already downloaded, and if not, downloads them
from the NASA Earthdata cloud. Once downloaded each file is converted to
parquet format and saved in the cache directory. This saves a huge amount of
disk space and enables dynamic reading and filtering of the returned "open"
arrow dataset.

Info about \code{add_vars}:
{chewie} will only cache specific variables made available in the GEDI hdf5
files. This is in part to reduce disk space but also to improve performance
and make working with these data simpler. However, some users may wish to
access other variables not cached by default. In this case the \code{add_vars}
argument can be used to add these variables to the returned dataset.
These must be provided as a named list in the format:
\code{list(new_var_name = "path/to/variable")}. The path to the variable is
relative to the root of the hdf5 file. For example, to add the
\code{solar_elevation} variable to the returned dataset, the \code{add_vars} argument
would be: \code{add_vars = list(solar_elevation = "geolocation/solar_elevation")}.
Note that, this feature is somewhat experimental - non existent variables or
incorrectly spelled variables will fail silently and not be added to the
returned dataset.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
prairie_creek <- sf::read_sf(
  system.file("geojson", "prairie-creek.geojson", package = "chewie")
)
prairie_creek_find_2b <- find_gedi(prairie_creek,
  gedi_product = "2B",
  date_start = "2022-01-01", date_end = "2022-04-01",
  cache = FALSE
)

prairie_creek_grab_2b <- grab_gedi(
  prairie_creek_find_2b
)
\dontshow{\}) # examplesIf}
}
\seealso{
For more information on the GEDI hdf5 files and the variables they contain
see the following links:

1B: https://lpdaac.usgs.gov/documents/585/gedi_l1b_product_data_dictionary_P003_v1.html

2A: https://lpdaac.usgs.gov/documents/982/gedi_l2a_dictionary_P003_v2.html

2B: https://lpdaac.usgs.gov/documents/587/gedi_l2b_dictionary_P001_v1.html

4A: https://daac.ornl.gov/GEDI/guides/GEDI_L4A_AGB_Density_V2_1.html
}
